// Generated by dts-bundle v0.7.3
// Dependencies for this module:
/// <reference path="../leaflet" />
/// <reference path="../geojson" />

declare module 'prebaked-geojson-map' {
    import "./index.css";
    import { tileLayer } from "leaflet";
    import { namedTileLayers } from "prebaked-geojson-map/layers";
    import add from "prebaked-geojson-map/map";
    import renderPaths from "prebaked-geojson-map/render_paths";
    import renderPoints from "prebaked-geojson-map/render_points";
    export { add, tileLayer as addLayer, renderPaths, renderPoints, namedTileLayers };
}

declare module 'prebaked-geojson-map/layers' {
    import { Control } from "leaflet";
    export const namedTileLayers: Control.LayersObject;
}

declare module 'prebaked-geojson-map/map' {
    import { Map, MapOptions } from "leaflet";
    function addMap(id?: string, options?: MapOptions): Map;
    export default addMap;
}

declare module 'prebaked-geojson-map/render_paths' {
    import { FeatureCollection, GeometryObject } from "geojson";
    import { Map } from "leaflet";
    import { ICustomProperties } from "prebaked-geojson-map/types";
    export default function renderPaths(geojson: FeatureCollection<GeometryObject, ICustomProperties>, map: Map): void;
}

declare module 'prebaked-geojson-map/render_points' {
    import { FeatureCollection, Point } from "geojson";
    import { Map } from "leaflet";
    import { ICustomProperties } from "prebaked-geojson-map/types";
    export default function renderPoints(geojson: FeatureCollection<Point, ICustomProperties>, map: Map): void;
}

declare module 'prebaked-geojson-map/types' {
    import { Feature, GeometryObject } from "geojson";
    import { LeafletEvent } from "leaflet";
    export interface ICustomProperties {
        activity?: string;
        color?: string;
        place?: {
            name?: string;
        };
        startTimestamp?: Date;
        endTimestamp?: Date;
        [name: string]: any;
    }
    export interface ICustomFeature<G extends GeometryObject, P extends ICustomProperties> extends Feature<G, P> {
        properties: P;
    }
    export interface IGroupedFeatures {
        [name: string]: Array<Feature<GeometryObject, ICustomProperties>>;
    }
    export interface ICustomLeafletEvent extends LeafletEvent {
        [name: string]: any;
    }
    export interface IRawNamedTileLayers {
        [name: string]: string[];
    }
    export interface IColors {
        [name: string]: string;
    }
    export interface IDashes {
        [name: string]: string;
    }
}

